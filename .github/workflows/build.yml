name: Build and Test ESP32 Firmware

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tools/**'
  pull_request:
    branches: [ main ]
  release:
    types: [ created, published ]
  workflow_dispatch:  # Manual trigger

# <-- PERUBAHAN: Menambahkan izin untuk upload hasil security scan
permissions:
  contents: read
  security-events: write

env:
  PLATFORMIO_VERSION: latest
  BUILD_FLAGS: -DCORE_DEBUG_LEVEL=0

jobs:
  # Job 1: Build firmware
  build:
    name: Build Firmware
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version tagging

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        # cache: 'pip' # <-- PERUBAHAN: Dihapus karena tidak ada requirements.txt

    - name: 📦 Cache PlatformIO
      uses: actions/cache@v3 # <-- PERUBAHAN: Menggunakan v3 (v4 tersedia, tapi v3 stabil)
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-pio-

    - name: 🔧 Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        pio --version

    - name: 🔨 Build firmware
      run: |
        echo "Building DIY Charger Simple firmware..."
        pio run

    - name: 📊 Check firmware size
      run: |
        echo "### Firmware Size Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pio run --target size | tee size_output.txt
        cat size_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: 📋 Generate build info
      run: |
        mkdir -p .pio/build/esp32dev # Pastikan direktori ada
        cat > .pio/build/esp32dev/build_info.txt << EOF
        Build Information
        =================
        Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Actor: ${{ github.actor }}
        Workflow: ${{ github.workflow }}
        Run: ${{ github.run_number }}
        EOF

    - name: 📤 Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ github.sha }}
        path: |
          .pio/build/esp32dev/firmware.bin
          .pio/build/esp32dev/firmware.elf
          .pio/build/esp32dev/build_info.txt
        retention-days: 30
        if-no-files-found: error

  # Job 2: Static analysis
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 🔧 Install PlatformIO
      run: |
        pip install platformio

    # <-- PERUBAHAN: Menambahkan langkah instalasi library PIO sebelum check
    - name: 📦 Install PIO Dependencies
      run: pio pkg install

    - name: 🔍 Run static analysis
      run: |
        echo "### Static Analysis Results" >> $GITHUB_STEP_SUMMARY
        # Menghapus --skip-packages karena dependensi sudah diinstal
        pio check --fail-on-defect=high --severity=high || echo "⚠️ High severity issues found" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true # Tetap lanjutkan meskipun ada warning/error minor

    - name: 📝 Check code formatting
      run: |
        echo "Checking code formatting..."
        # <-- PERUBAHAN: Memperbaiki syntax grep
        if grep -r '\t' src/ include/; then
          echo "❌ Tabs found in source files (use spaces)" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ No tabs found" >> $GITHUB_STEP_SUMMARY
        fi

  # Job 3: Test Python tools
  test-tools:
    name: Test Analysis Tools
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        # cache: 'pip' # <-- PERUBAHAN: Dihapus karena tidak ada requirements.txt

    - name: 📦 Install dependencies
      run: |
        pip install matplotlib numpy pandas

    - name: 🧪 Test log parser
      run: |
        # Create sample CSV for testing
        mkdir -p logs # Pastikan direktori logs ada
        cat > logs/test_log.csv << EOF
        Timestamp,Port,Voltage(V),Current(A),Power(W),mAh,Wh,Mode,Battery,Status
        0,0,4.20,0.00,0.00,0.0,0.00,Safety,Li-ion,Idle
        1,0,4.15,0.98,4.07,0.3,0.00,Discharging,Li-ion,Active
        2,0,4.10,0.96,3.94,0.6,0.00,Discharging,Li-ion,Active
        EOF

        # <-- PERUBAHAN: Menggunakan path yang benar dan output yang berbeda
        python3 tools/parse_logs.py logs/test_log.csv --export --save-plot test_plot.png

        if [ -f test_log_summary.txt ] && [ -f test_plot.png ]; then
          echo "✅ Log parser working correctly" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Log parser failed (Output files not found)" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  # Job 4: Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master # Versi master biasanya OK, bisa diganti dengan versi spesifik jika perlu
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      # continue-on-error: true # <-- PERUBAHAN: Sebaiknya jangan continue jika scan gagal

    - name: 📤 Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3 # <-- PERUBAHAN: Update ke v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always() # Upload report meskipun scan gagal atau tidak menemukan apa-apa

  # Job 5: Create release (only on tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, lint, test-tools, security] # <-- PERUBAHAN: Menambahkan security ke needs
    if: startsWith(github.ref, 'refs/tags/v')
    permissions: # <-- PERUBAHAN: Menambahkan izin contents: write untuk membuat release
      contents: write
      security-events: write # Sudah ada di level atas, tapi bisa juga di level job

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with: # <-- PERUBAHAN: Perlu fetch-depth: 0 untuk generate changelog
        fetch-depth: 0

    - name: 📥 Download firmware artifact
      uses: actions/download-artifact@v4
      with:
        name: firmware-${{ github.sha }}
        path: ./artifacts

    - name: 📦 Create release package
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        RELEASE_NAME="diy-charger-simple_v${VERSION}_$(date +%Y%m%d)"
        mkdir -p release/$RELEASE_NAME

        cp artifacts/firmware.bin release/$RELEASE_NAME/
        cp artifacts/firmware.elf release/$RELEASE_NAME/ 2>/dev/null || true # ELF mungkin tidak selalu ada
        cp README.md release/$RELEASE_NAME/
        cp QUICKSTART.md release/$RELEASE_NAME/ 2>/dev/null || true
        cp WIRING.md release/$RELEASE_NAME/ 2>/dev/null || true
        cp LICENSE release/$RELEASE_NAME/

        cat > release/$RELEASE_NAME/FLASH.txt << EOF
        DIY Charger Simple v${VERSION}
        ==============================
        Quick Flash:
        esptool.py --port YOUR_PORT write_flash 0x10000 firmware.bin
        See README.md for detailed instructions.
        EOF

        cd release
        tar -czf ${RELEASE_NAME}.tar.gz ${RELEASE_NAME}
        zip -r ${RELEASE_NAME}.zip ${RELEASE_NAME}
        cd ..
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV

    - name: 📝 Generate changelog (basic)
      id: changelog
      run: |
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in this release:" >> $GITHUB_OUTPUT
        # Changelog sederhana dari commit message terakhir
        git log -1 --pretty=%B >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.release.tag_name }}...${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        # Catatan: Untuk changelog yang lebih baik, pertimbangkan action seperti conventional-changelog-action

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/${{ env.RELEASE_NAME }}.tar.gz
          release/${{ env.RELEASE_NAME }}.zip
          artifacts/firmware.bin
          artifacts/firmware.elf
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    # <-- PERUBAHAN: needs harus mencakup semua job yang bisa gagal
    needs: [build, lint, test-tools, security, docs, dependencies]
    if: failure() # Hanya berjalan jika ada job sebelumnya yang gagal

    steps:
    - name: 📧 Send notification
      run: |
        echo "❌ Build failed for commit ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "Author: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

  # Job 7: Documentation check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📚 Check documentation files
      run: |
        echo "### Documentation Status" >> $GITHUB_STEP_SUMMARY
        REQUIRED_DOCS=("README.md" "QUICKSTART.md" "WIRING.md" "LICENSE" "CONTRIBUTING.md")
        ALL_EXIST=true
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ -f "$doc" ]; then
            echo "✅ $doc exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ $doc missing" >> $GITHUB_STEP_SUMMARY
            ALL_EXIST=false
          fi
        done
        if [ "$ALL_EXIST" = false ]; then exit 1; fi

    - name: 🔗 Check for broken links
      run: |
        echo "Checking for broken internal links..."
        # <-- PERUBAHAN: Menggunakan find untuk cara yang lebih aman
        find . -maxdepth 2 \( -name '*.md' -o -path './docs/*.md' \) -print0 | while IFS= read -r -d $'\0' file; do
          echo "Checking $file..."
          # Ekstrak link markdown internal
          grep -o '\[[^]]*\]([^)]*\.md)' "$file" | sed -E 's/.*\]\((.*)\)/\1/' | while read -r link; do
            # Abaikan link eksternal atau jangkar
            if [[ "$link" == \#* ]] || [[ "$link" == http* ]]; then
              continue
            fi
            # Periksa apakah file link ada (relatif terhadap file markdown)
            link_path=$(dirname "$file")/$link
            if [ ! -f "$link_path" ]; then
              echo "⚠️ Broken link in $file: $link (resolved to $link_path)"
              # Anda bisa menambahkan 'exit 1' di sini jika ingin gagal jika ada broken link
            fi
          done
        done
        echo "Link check complete."

  # Job 8: Dependency check
  dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 🔧 Install PlatformIO
      run: pip install platformio

    - name: 📦 Check library versions
      run: |
        echo "### Library Versions" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        # <-- PERUBAHAN: Menjalankan pio pkg install agar list menampilkan sesuatu
        pio pkg install
        pio pkg list
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: 🔄 Check for updates
      run: |
        echo "Checking for library updates..."
        pio pkg outdated || true # || true agar tidak gagal jika ada update

