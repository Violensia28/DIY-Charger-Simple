name: Build and Test ESP32 Firmware

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - 'tools/**'
  pull_request:
    branches: [ main ]
  release:
    types: [ created, published ]
  workflow_dispatch:  # Manual trigger

permissions:
  contents: read
  security-events: write

env:
  PLATFORMIO_VERSION: latest
  BUILD_FLAGS: -DCORE_DEBUG_LEVEL=0

jobs:
  # Job 1: Build firmware (Tidak ada perubahan di job ini selain dari file platformio.ini)
  build:
    name: Build Firmware
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: üì¶ Cache PlatformIO
      uses: actions/cache@v3
      with:
        path: |
          ~/.platformio
          .pio
        key: ${{ runner.os }}-pio-${{ hashFiles('**/platformio.ini') }}-v3
        restore-keys: |
          ${{ runner.os }}-pio-
    - name: üîß Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        pio --version
    - name: üßπ Prune PIO Cache
      run: pio system prune -f
    - name: ‚ú® Update PIO Registry
      run: pio pkg update
    - name: üì¶ Install PIO Project Dependencies
      run: pio pkg install
    - name: üî® Build firmware
      run: |
        echo "Building DIY Charger Simple firmware..."
        pio run -v # Tetap pakai verbose di build utama
    - name: üìä Check firmware size
      run: |
        echo "### Firmware Size Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pio run --target size | tee size_output.txt
        cat size_output.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    - name: üìã Generate build info
      run: |
        mkdir -p .pio/build/esp32dev
        cat > .pio/build/esp32dev/build_info.txt << EOF
        Build Information
        =================
        Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        Commit: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Actor: ${{ github.actor }}
        Workflow: ${{ github.workflow }}
        Run: ${{ github.run_number }}
        EOF
    - name: üì§ Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: firmware-${{ github.sha }}
        path: |
          .pio/build/esp32dev/firmware.bin
          .pio/build/esp32dev/firmware.elf
          .pio/build/esp32dev/build_info.txt
        retention-days: 30
        if-no-files-found: error

  # Job 2: Static analysis
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: üîß Install PlatformIO
      run: |
        pip install platformio

    - name: üßπ Prune PIO Cache
      run: pio system prune -f

    - name: ‚ú® Update PIO Registry
      run: pio pkg update

    - name: üì¶ Install PIO Dependencies
      run: pio pkg install # Tanpa -v

    # <-- PERUBAHAN DI SINI: Hapus langkah Initialize PIO Environment
    # - name: ‚ú® Initialize PIO Environment
    #   run: pio run -t nobuild -v

    - name: üîç Run static analysis
      run: |
        echo "### Static Analysis Results" >> $GITHUB_STEP_SUMMARY
        # Menjalankan pio check langsung setelah install dependencies
        pio check --fail-on-defect=high --severity=high -v || echo "‚ö†Ô∏è High severity issues found" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

    - name: üìù Check code formatting
      run: |
        echo "Checking code formatting..."
        if grep -r '\t' src/ include/; then
          echo "‚ùå Tabs found in source files (use spaces)" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "‚úÖ No tabs found" >> $GITHUB_STEP_SUMMARY
        fi

  # ... (Job 3 sampai 8 tetap sama seperti sebelumnya) ...
  # Job 3: Test Python tools
  test-tools:
    name: Test Analysis Tools
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    - name: üì¶ Install dependencies
      run: |
        pip install matplotlib numpy pandas
    - name: üß™ Test log parser
      run: |
        mkdir -p logs
        cat > logs/test_log.csv << EOF
        Timestamp,Port,Voltage(V),Current(A),Power(W),mAh,Wh,Mode,Battery,Status
        0,0,4.20,0.00,0.00,0.0,0.00,Safety,Li-ion,Idle
        1,0,4.15,0.98,4.07,0.3,0.00,Discharging,Li-ion,Active
        2,0,4.10,0.96,3.94,0.6,0.00,Discharging,Li-ion,Active
        EOF
        python3 tools/parse_logs.py logs/test_log.csv --export --save-plot test_plot.png
        if [ -f test_log_summary.txt ] && [ -f test_plot.png ]; then
          echo "‚úÖ Log parser working correctly" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Log parser failed (Output files not found)" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

  # Job 4: Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    - name: üîí Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    - name: üì§ Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  # Job 5: Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, lint, test-tools, security]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      security-events: write
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: üì• Download firmware artifact
      uses: actions/download-artifact@v4
      with:
        name: firmware-${{ github.sha }}
        path: ./artifacts
    - name: üì¶ Create release package
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        RELEASE_NAME="diy-charger-simple_v${VERSION}_$(date +%Y%m%d)"
        mkdir -p release/$RELEASE_NAME
        cp artifacts/firmware.bin release/$RELEASE_NAME/
        cp artifacts/firmware.elf release/$RELEASE_NAME/ 2>/dev/null || true
        cp README.md release/$RELEASE_NAME/
        cp QUICKSTART.md release/$RELEASE_NAME/ 2>/dev/null || true
        cp WIRING.md release/$RELEASE_NAME/ 2>/dev/null || true
        cp LICENSE release/$RELEASE_NAME/
        cat > release/$RELEASE_NAME/FLASH.txt << EOF
        DIY Charger Simple v${VERSION}
        ==============================
        Quick Flash:
        esptool.py --port YOUR_PORT write_flash 0x10000 firmware.bin
        See README.md for detailed instructions.
        EOF
        cd release
        tar -czf ${RELEASE_NAME}.tar.gz ${RELEASE_NAME}
        zip -r ${RELEASE_NAME}.zip ${RELEASE_NAME}
        cd ..
        echo "RELEASE_NAME=${RELEASE_NAME}" >> $GITHUB_ENV
    - name: üìù Generate changelog (basic)
      id: changelog
      run: |
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes in this release:" >> $GITHUB_OUTPUT
        git log -1 --pretty=%B >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || git rev-list --max-parents=0 HEAD)
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    - name: üöÄ Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/${{ env.RELEASE_NAME }}.tar.gz
          release/${{ env.RELEASE_NAME }}.zip
          artifacts/firmware.bin
          artifacts/firmware.elf
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 6: Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [build, lint, test-tools, security, docs, dependencies]
    if: failure()
    steps:
    - name: üìß Send notification
      run: |
        echo "‚ùå Build failed for commit ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "Author: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "Check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

  # Job 7: Documentation check
  docs:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
    - name: üìö Check documentation files
      run: |
        echo "### Documentation Status" >> $GITHUB_STEP_SUMMARY
        REQUIRED_DOCS=("README.md" "QUICKSTART.md" "WIRING.md" "LICENSE" "CONTRIBUTING.md")
        ALL_EXIST=true
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ -f "$doc" ]; then
            echo "‚úÖ $doc exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå $doc missing" >> $GITHUB_STEP_SUMMARY
            ALL_EXIST=false
          fi
        done
        if [ "$ALL_EXIST" = false ]; then exit 1; fi
    - name: üîó Check for broken links
      run: |
        echo "Checking for broken internal links..."
        find . -maxdepth 2 \( -name '*.md' -o -path './docs/*.md' \) -print0 | while IFS= read -r -d $'\0' file; do
          if [ -f "$file" ]; then
            echo "Checking $file..."
            grep -o '\[[^]]*\]([^)]*\.md)' "$file" | sed -E 's/.*\]\((.*)\)/\1/' | while read -r link; do
              if [[ "$link" == \#* ]] || [[ "$link" == http* ]]; then
                continue
              fi
              link_path=$(dirname "$file")/$link
              normalized_path=$(realpath -m "$link_path")
              if [ ! -f "$normalized_path" ]; then
                echo "‚ö†Ô∏è Broken link in '$file': '$link' (Resolved to '$normalized_path' which does not exist)"
                # exit 1
              fi
            done
          fi
        done
        echo "Link check complete."

  # Job 8: Dependency check
  dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: üîß Install PlatformIO
      run: pip install platformio

    - name: üßπ Prune PIO Cache
      run: pio system prune -f

    - name: ‚ú® Update PIO Registry
      run: pio pkg update

    - name: üì¶ Check library versions
      run: |
        echo "### Library Versions" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        pio pkg install # Tanpa -v
        pio pkg list
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: üîÑ Check for updates
      run: |
        echo "Checking for library updates..."
        pio pkg outdated -v || true
